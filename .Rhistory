#정형 데이터 분석 파일의 종류
# Database (Oracle, MySQL, MariaDB)
# Exel (xls)
# CSV (Comma Separated Vector)
#외부 라이브러리(패키지)는 타 개발자가 만들어놓은 함수의 집합
#라이브러리 중 텍스트 분석에서는 dplyr 가 최고
install.packages("dplyr")
library(dplyr)
temp <-data.frame(read.csv("class_scores.csv"))
head(temp)
tail(temp)
#정형 데이터 분석 파일의 종류
# Database (Oracle, MySQL, MariaDB)
# Exel (xls)
# CSV (Comma Separated Vector)
#외부 라이브러리(패키지)는 타 개발자가 만들어놓은 함수의 집합
#라이브러리 중 텍스트 분석에서는 dplyr 가 최고
getwd()
temp <-data.frame(read.csv("class_scores.csv"))
#정형 데이터 분석 파일의 종류
# Database (Oracle, MySQL, MariaDB)
# Exel (xls)
# CSV (Comma Separated Vector)
#외부 라이브러리(패키지)는 타 개발자가 만들어놓은 함수의 집합
#라이브러리 중 텍스트 분석에서는 dplyr 가 최고
getwd()
install.packages("dplyr")
library(dplyr)
head(temp)
library(dplyr)
temp <-data.frame(read.csv("class_scores.csv"))
#정형 데이터 분석 파일의 종류
# Database (Oracle, MySQL, MariaDB)
# Exel (xls)
# CSV (Comma Separated Vector)
#외부 라이브러리(패키지)는 타 개발자가 만들어놓은 함수의 집합
#라이브러리 중 텍스트 분석에서는 dplyr 가 최고
getwd()
library(dplyr)
install.packages("dplyr")
library(dplyr)
temp <-data.frame(read.csv("class_scores.csv"))
#정형 데이터 분석 파일의 종류
# Database (Oracle, MySQL, MariaDB)
# Exel (xls)
# CSV (Comma Separated Vector)
#외부 라이브러리(패키지)는 타 개발자가 만들어놓은 함수의 집합
#라이브러리 중 텍스트 분석에서는 dplyr 가 최고
getwd()
temp <-data.frame(read.csv("class_scores.csv"))
dim(temp)
View(temp)
# select : 선택한 meta data에 해당하는 instance를 출력
select(temp)
head(temp)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
#filter, distance, top_n, sample_n : 선택한 row(observation) - key value에 해당하는 instance를 출력
# mutate, transmutate, mutate_each : data
# group_by : group data
# summarise, summarise_each, count : summary
# arrange : data sorting
# inner_join, left_join, right_join, full_join : combination
head(grade)
grade <-data.frame(read.csv("class_scores.csv"))
head(grade)
#filter, distance, top_n, sample_n : 선택한 row(observation) - key value에 해당하는 instance를 출력
# mutate, transmutate, mutate_each : data
# group_by : group data
# summarise, summarise_each, count : summary
# arrange : data sorting
# inner_join, left_join, right_join, full_join : combination
head(grade)
head(select(grade,"Math"))
# select : 선택한 meta data에 해당하는 instance를 출력
select(grade)
# mean, max, min
x <- mean(select(grade"Math"))
# mean, max, min
x <- mean(select(grade,"Math"))
head(grade)
## select 예제
## 1 국어, 영어, 수학 도메인기(=컬럼)만 가져오기
grade $>$
dplyr::select(Math,English,Science) $>$ head
## select 예제
## 1 국어, 영어, 수학 도메인기(=컬럼)만 가져오기
grade $>$
dplyr::select(Math,English,Science) $>$
head
grade$>$
dplyr::select(Math,English,Science)
grade$>$
dplyr::select(Math,English,Science) %>%
SLICE(1:10)
grade$>$
dplyr::select(Math,English,Science) %>%
Slice(1:10)
#filter, distance, top_n, sample_n : 선택한 row(observation) - key value에 해당하는 instance를 출력
# mutate, transmutate, mutate_each : data
# group_by : group data
# summarise, summarise_each, count : summary
# arrange : data sorting
# inner_join, left_join, right_join, full_join : combination
head(grade)
## select 예제
## 1 국어, 영어, 수학 도메인기(=컬럼)만 가져오기
grade %>%
dplyr::select(Math,English,Science) %>%
head
## 2 상위 10개 보기
grade%>%dplyr::select(Math,English,Science) %>%
Slice(1:10)
## 2 상위 10개 보기
grade%>%dplyr::select(Math,English,Science) %>%
slice(1:10)
## 3 성별 제외한 컬럼 보기
grade $>$ dplyr::select(-gender) %>%
slice(1:10)
## 4 수학부터 작문까지 컬럼 보기
grade $>$ dplyr::select(Math:Writing) %>%
slice(1:10)
## 3 성별 제외한 컬럼 보기
grade %>% dplyr::select(-gender) %>%
slice(1:10)
## 4 수학부터 작문까지 컬럼 보기
grade %>% dplyr::select(Math:Writing) %>%
slice(1:10)
## 5 모든 컬럼 조회 everything()
grade%>%dplyr::everything() %>%
slice(1:10)
## 5 모든 컬럼 조회 everything()
grade%>%dplyr::select(everything %>%
## 5 모든 컬럼 조회 everything()
grade%>%dplyr::select(everything) %>%
slice(1:10)
## 6 E 로 시작하는 컬럼만 보기 starts_with('E')
grade%>%dplyr::select(starts_with('E')) %>%
slice(1:10)
## 6 E 로 시작하는 컬럼만 보기 starts_with('E')
grade%>%dplyr::select(starts_with('E')) %>%
slice(1:10)
## 7 e 로 끝나는 컬럼만 보기 ends_with('e')
grade%>%dplyr::select(ends_with('E')) %>%
slice(1:10)
## 8 e 가 들어가는 컬럼 다 가져오기 contains('e')
grade%>%dplyr::select(contains('E')) %>%
slice(1:10)
## filter 예제
## 1. 1학년 학생들만 보기
grade%>%dplyr::filter(grade==1)%>%
slice(1:3)
## 2. 1학년 남학생만 보기
grade%>%dplyr::filter(gender==M)%>%
slice(1:3)
## 2. 1학년 남학생만 보기
grade%>%dplyr::filter(gender=M)%>%
slice(1:3)
## 2. 1학년 남학생만 보기
grade%>%dplyr::filter(gender==M)%>%
slice(1:3)
## filter 예제
## 1. 1학년 학생들만 보기 (Numeric)
scores%>%dplyr::filter(grade==1)%>%
slice(1:3)
scores <-data.frame(read.csv("class_scores.csv"))
scores%>%dplyr::filter(grade==1)%>%
slice(1:3)
## 2. 1학년 남학생만 보기 (Character)
scores%>%dplyr::filter(grade==1 & gender=='M')%>%
slice(1:3)
## 3. 1학년이 아닌 학생들만 보기 (!grade==1)
scores%>%dplyr::filter(!grade==1)%>%
slice(1:3)
## 3. 1학년이 아닌 학생들만 보기 (!grade==1)
scores%>%dplyr::filter(!grade==1)%>%
slice(1:10)
## 4. 1, 2학년 학생들만 보기 (# grade ==1 | grade==2)
scores%>%dplyr::filter(#grade==1 | grade==2)%>%
## 4. 1, 2학년 학생들만 보기 (# grade ==1 | grade==2)
scores%>%dplyr::filter(#grade==1 | grade==2)%>%
slice(1:10)
## 3. 1, 2학년 학생들만 보기 (or 조건 /# grade ==1 | grade==2)
scores%>%dplyr::filter(grade==1 | grade==2)%>%
slice(1:10)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
## 3. 1, 2학년 학생들만 보기 (or 조건 /# grade ==1 | grade==2)
scores%>%dplyr::filter(grade==1 | grade==2)%>%
slice(1:3)
## 3. 1, 2학년 학생들만 보기 (or 조건)
scores%>%dplyr::filter(grade==1 | grade==2)%>%
view(scores)
## 3. 1, 2학년 학생들만 보기 (or 조건)
scores%>%dplyr::filter(grade==1 | grade==2)%>%
tail()
## 4. 1학년이 아닌 학생들만 보기 (!grade==1)
scores%>%dplyr::filter(!grade==1)%>%
slice(1:10)
## 4. 1학년이 아닌 학생들만 보기 (!grade==1)
scores%>%dplyr::filter(!grade==1)%>%
tail
## 5. 수학점수가 80이상인 학생들만 보기
scores%>%dplyr::filter(Math>=80)%>%
slice(1:10)
## 5. 수학점수가 80이상인 학생들만 보기
scores%>%dplyr::filter(Math>=80)%>%
tail
## 6. 수학점수가 80 이상이면서 영어점수가 70이상이 학생들만 보기
scores%>%dplyr::filter(Math>=80 & English>=70)%>%
tail
## 7. 학번이 10101 부터 10120인 학생들
scores%>%dplyr::filter(Stu_ID>=10101 & Stu_ID<10121)%>%
tail
## 7. 학번이 10101 부터 10120인 학생들중에서 여학생이면서 영어가 80점 이상인학생만 보기
scores%>%dplyr::filter(Stu_ID>=10101 & Stu_ID<10121 & gender=='F' & English>=80)%>%
tail
## 9. 학생들 중 한 과목이라도 100점이 있는 학생만 보기
scores%>%dplyr::filter(Math==100 | English==100 | Science==100 | Marketing==100 | Writing==100)%>%
tail
## 10. 학생들 중 한 과목이라도 0점이 있는 학생만 보기
scores%>%dplyr::filter(Math==0 | English==0 | Science==0 | Marketing==0 | Writing==0)%>%
tail
scores%>%dplyr::filter(Math==0 | English==0 | Science==0 | Marketing==0 | Writing==0)%>%
tail
scores%>%dplyr::filter(sTU_ID%%2==1 & gender=='M' & Math==90 & Science==90 )%>%
tail
scores%>%dplyr::filter(Stu_ID%%2==1 & gender=='M' & Math==90 & Science==90 )%>%
tail
scores <- SCORES%>%dplyr::mutate(Aveage=((Math+English+Science+Marketing+Writing)/5)
%>% slice(1:10)
scores <- SCORES%>%dplyr::mutate(Aveage=((Math+English+Science+Marketing+Writing)/5)
%>% slice(1:10)
scores %>% slice(1:10)
scores <- SCORES%>%dplyr::mutate(dense_rank(dens(Average))
scores %>% slice(1:10)
scores <- SCORES%>%dplyr::mutate(dense_rank(dens(Average))
scores <- SCORES%>%dplyr::mutate(dense_rank(dens(Average))
scores %>% slice(1:10)
scores <- SCORES%>%dplyr::mutate(rank=(dense_rank(dens(Average)))
scores %>% slice(1:10)
scores <- SCORES%>%dplyr::mutate(rank=(dense_rank(dens(Average))
scores %>% slice(1:10)
scores <- SCORES%>%dplyr::mutate(Rank=(dense_rank(dens(Average))
scores %>% slice(1:10)
scores <- scores%>%dplyr::mutate(Rank=(dense_rank(desc(Average))
scores %>% slice(1:10)
scores <- scores%>%dplyr::mutate(Rank=(dense_rank(desc(Average))
scores %>% slice(1:10)
## 2. 학생들 평균점수를 기준으로 Rank 추가 (dense_rank(dens(Average)))
scores <- scores%>%dplyr::mutate(Rank=(dense_rank(desc(Average)))
scores %>% slice(1:10)
## 2. 학생들 평균점수를 기준으로 Rank 추가 (dense_rank(dens(Average)))
scores <- scores%>%dplyr::mutate(Rank=(dense_rank(desc(Average)))
scores %>% slice(1:10)
scores <- SCORES%>%dplyr::mutate(Rank=(dense_rank(desc(Average)))
scores %>% slice(1:10)
scores <- SCORES%>%dplyr::mutate(RANK=(dense_rank(desc(Average)))
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
SCORES %>% slice(1:10)
scores <- scores%>%dplyr::mutate(Aveage=((Math+English+Science+Marketing+Writing)/5)
scores %>% slice(1:10)
scores %>% slice(1:10)
scores <-data.frame(read.csv("class_scores.csv"))
scores <- scores%>%dplyr::mutate(Aveage=((Math+English+Science+Marketing+Writing)/5)
scores %>% slice(1:10)
head(scores)
scores <- scores%>%dplyr::mutate(Aveage=((Math+English+Science+Marketing+Writing)/5))
head(scores)
scores <- SCORES%>%dplyr::mutate(RANK=(dense_rank(desc(Average)))
head(scores)
head(scores)
scores <- scores%>%dplyr::mutate(RANK=(dense_rank(desc(Average)))
head(scores)
head(scores)
scores <- scores%>%dplyr::mutate(RANK=(dense_rank(desc(Average)))
head(scores)
scores <- scores%>%dplyr::mutate(RANK=(dense_rank(desc(Average)))
slice(scores)
scores%>%slice(1:3)
scores <- scores%>%
dplyr::mutate(Rank=(dense_rank(desc(Average)))
scores%>%slice(1:3)
head(scores)
scores <- scores%>%
dplyr::mutate(Aveage=((Math+English+Science+Marketing+Writing)/5))
head(scores)
scores <- scores%>%
dplyr::mutate(Average=((Math+English+Science+Marketing+Writing)/5))
head(scores)
scores <-scores%>%
dplyr::mutate(Rank=(dense_rank(desc(Average)))
head(scores)
head(scores)
scores <-scores%>%
dplyr::mutate(Rank=(dense_rank(desc(Average)))
head(scores)
scores <- scores%>%
dplyr::mutate(Average=((Math+English+Science+Marketing+Writing)/5))
head(scores)
scores <-scores%>%
dplyr::mutate(Rank=(dense_rank(desc(Average)))
head(scores)
scores <-scores%>%
dplyr::mutate(Rank=(dense_rank(desc(Average)))
scores%>%dplyr::mutate(Eval=(ifelse(Average>=90,'A',ifelse(Average>=80,'B',ifelse(Average>=70,'c',ifelse(Average>=60,'D',ifelse(Average>=50,'E','F')))))))
scores <-data.frame(read.csv("class_scores.csv"))
scores <- scores%>%
dplyr::mutate(Average=((Math+English+Science+Marketing+Writing)/5))
head(scores)
scores <-scores%>%
dplyr::mutate(Rank=(dense_rank(desc(Average)))
head(scores)
scores%>%dplyr::mutate(Eval=(ifelse(Average>=90,'A',ifelse(Average>=80,'B',ifelse(Average>=70,'c',ifelse(Average>=60,'D',ifelse(Average>=50,'E','F'))))))
head(scores)
scores <-data.frame(read.csv("class_scores.csv"))
scores <- scores%>%
dplyr::mutate(Average=((Math+English+Science+Marketing+Writing)/5))
head(scores)
scores <- scores%>%
dplyr::mutate(Rank=(dense_rank(Average)))
head(scores)
scores <- scores%>%
dplyr::mutate(Eval=(ifelse(Average>=90,'A',ifelse(Average>=80,'B',ifelse(Average>=70,'c',ifelse(Average>=60,'D',ifelse(Average>=50,'E','F')))))))
head(scores)
scores %>% dplyr::select(-gender) %>%
slice(1:10)
scores %>% dplyr::select(Math:Writing) %>%
slice(1:10)
scores%>%dplyr::select(starts_with('E')) %>%
slice(1:10)
scores%>%dplyr::select(ends_with('E')) %>%
slice(1:10)
scores%>%dplyr::select(contains('E')) %>%
slice(1:10)
scores%>%dplyr::filter(Stu_ID%%2==1 & gender=='M' & Math==90 & Science==90 )%>%
tail
## group_by 예제
## 학생별 학생 수 보기
scores%>%dplyr::group_by(grade)%>%
dplyr::summarise(Count=length(grade))
scores%>%
dplyr::group_by(gender)%>%
summarise(Average)
scores%>%
dplyr::group_by(gender)%>%
summarise(Average by gender=Average)
scores%>%
dplyr::mutate(temp_avg=(Math+English+Science+Marketing+Writing)/5)%>%
group_by(gender)%>%
summarise(Average by gender=temp_avg)
scores%>%
dplyr::mutate(temp_avg=(Math+English+Science+Marketing+Writing)/5)%>%
group_by(gender)%>%
summarise(성별평균점수=(temp_avg))
scores%>%
dplyr::mutate(temp_avg=(Math+English+Science+Marketing+Writing)/5)%>%
group_by(gender)%>%
summarise(성별평균점수=mean(temp_avg))
scores%>%dplyr::filter(grade==1)%>%
slice(1:3)
dir.create("[ 사용자정의 ] /myRworkspace")
setwd("[ 사용자정의 ]/myRworkspace")
scores%>%
group_by(gender)%>%
summarise(성별평균점수=mean(temp_avg))
scores%>%
dplyr::mutate(temp_avg=(Math+English+Science+Marketing+Writing)/5)%>%
group_by(gender)%>%
summarise(성별평균점수=mean(temp_avg))
hist(temp$성별평균점수,
xlab='남',
col='yellow'
border='blue')
# 히스토그램
hist(temp$성별평균점수,
xlab="남,
col="yellow""
border="blue")
hist(scores$성별평균점수,
xlab="남,
col="yellow""
border="blue")
hist(temp$성별평균점수,
xlab="남,
col="yellow""
border="blue")
hist(scores$성별평균점수,
xlab="남,
col="yellow""
border="blue")
# 히스토그램
hist(scores$성별평균점수,
xlab="남",
col="yellow"
border="blue")
# 히스토그램
hist(temp$성별평균점수,
xlab="남",
col="yellow"
border="blue")
# 히스토그램
hist(temp$성별평균점수,
xlab="남",
col="yellow",
border="blue")
scores%>%
dplyr::mutate(temp_avg=(Math+English+Science+Marketing+Writing)/5)%>%
group_by(gender)%>%
summarise(성별평균점수=mean(temp_avg))
hist(temp_avg$성별평균점수,
xlab="남",
col="yellow",
border="blue")
dplyr::mutate(temp_avg=(Math+English+Science+Marketing+Writing)/5)%>%
group_by(gender)
scores%>%
dplyr::group_by(gender)
temp <- scores%>%
dplyr::mutate(temp_avg=(Math+English+Science+Marketing+Writing)/5)%>%
group_by(gender)%>%
summarise(성별평균점수=mean(temp_avg))
hist(temp$성별평균점수,
xlab="남",
col="yellow",
border="blue")
temp <- scores%>%
group_by(gender)%>%
summarise(성별평균점수=mean(Average))
scores%>%
group_by(gender)%>%
summarise(성별평균점수=mean(Average))
temp <- scores%>%
group_by(gender)%>%
summarise(성별평균점수=mean(Average))
hist(temp$성별평균점수,
xlab="남",
col="yellow",
border="blue")
scores%>%
dplyr::group_by(gender)%>%
summarise(성별평균점수=mean(Average))
temp <- scores%>%
dplyr::mutate(temp_avg=(Math+English+Science+Marketing+Writing)/5)%>%
group_by(gender)%>%
summarise(성별평균점수=mean(temp_avg)
temp <- scores%>%
dplyr::mutate(temp_avg=(Math+English+Science+Marketing+Writing)/5)%>%
group_by(gender)%>%
summarise(성별평균점수=mean(temp_avg)
temp <- scores%>%
mutate(temp_avg=(Math+English+Science+Marketing+Writing)/5)%>%
group_by(gender)%>%
summarise(성별평균점수=mean(temp_avg)
dplyr::mutate(temp_avg=(Math+English+Science+Marketing+Writing)/5)%>%
group_by(gender)%>%
summarise(성별평균점수=mean(temp_avg))
##Oracle Demo
## 외부에서 접속해서 분석할 경우
getwt()
source('C:/R/Project180721/Project180721/Oracle Demo.R', encoding = 'UTF-8', echo=TRUE)
##Oracle Demo
## 외부에서 접속해서 분석할 경우
getwd()
dir.create("../project180721_oracle")
setwd("../project180721_oracle")
setwd("../project180721_oracle")
setwd("project180721_oracle")
setwd("../project180721_oracle")
